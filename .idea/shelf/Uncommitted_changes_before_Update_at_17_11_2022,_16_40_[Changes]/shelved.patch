Index: src/main/java/org/Game/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Game;\n\nimport java.util.Objects;\nimport java.util.Random;\n\npublic class GameController {\n    Cup cup = new Cup();\n    GUI_Controller gui_controller = new GUI_Controller();\n    Random random = new Random();\n    GameBoard gameBoard = new GameBoard();\n\n    Deck deck;\n\n    int noPlayer;\n    int startMoney;\n    int indexPlayerOwner;\n    //Random player starts\n    int playerTurn;\n\n    Player[] Player;\n\n    //Starts game\n    public void startGame() {\n\n        //Gives the player the option to select language and number of players\n        gameBoard.createGameBoard();\n        gui_controller.guiHelper(\"Dansk\", gui_controller.createGameBoard(gameBoard.getFields()));\n        noPlayer = Integer.parseInt(gui_controller.getUserButtonPressed(\"Choose number of players\", \"2\", \"3\", \"4\"));\n        gui_controller.setGUI_NumberOfPlayersAndCars(noPlayer);\n        Player = new Player[noPlayer];\n        deck = new Deck(noPlayer);\n\n\n        // shuffles the deck\n        deck.shuffle();\n        //Sets starting balance in accordance to number of players\n        if (noPlayer == 2) {\n            startMoney = 20;\n        } else if (noPlayer == 3) {\n            startMoney = 18;\n        } else if (noPlayer == 4) {\n            startMoney = 16;\n        }\n        // Chooses a random starting player\n        playerTurn = random.nextInt(0, noPlayer);\n        // creates the players and adds them to the GUI\n        for (int i = 0; i < noPlayer; i++) {\n\n            Player[i] = new Player(startMoney, 0, gui_controller.getUserString(\"Enter player name: \"));\n\n            gui_controller.getField(0);\n            gui_controller.createGUI_Car(i, \"startMoney\", startMoney);\n            gui_controller.createGUI_Player(i, Player[i]);\n        }\n\n\n        while (true) {\n            //Important note: the game stops until \"OK\" is pressed in the GUI\n\n            //Checks if the player is in jail and gives the option to pay to get out of jail\n            if (Player[playerTurn].getJail()) {\n                gui_controller.getUserButtonPressed(Player[playerTurn].getName() + \" you are in jail. Pay to get out:\", \"Pay 1M\");\n                Player[playerTurn].addAccountBalance(-1);\n                gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                Player[playerTurn].setJail(false);\n                gui_controller.getShowMessage(\"Thanks for the money man! Press OK to roll the dices: \");\n                cup.rollDices();\n                gui_controller.setDices(cup.getDice1(), cup.getDice2());\n            } else {\n                // Rolls the dices normally if the player is not in jail\n                gui_controller.getShowMessage(Player[playerTurn].getName() + \"'s turn. Press OK to roll\");\n                cup.rollDices();\n                gui_controller.setDices(cup.getDice1(), cup.getDice2());\n            }\n\n            //Loop that makes the players go around in a circle instead of breaking at field 24\n            gui_controller.setGui_car(playerTurn, Player[playerTurn].getPlayerPosition() + cup.getSum(), Player[playerTurn].getPlayerPosition());\n            Player[playerTurn].addPlayerPosition(cup.getSum());\n\n\n            // Sends player to jail\n            if (Player[playerTurn].getPlayerPosition() == 18) {\n                gui_controller.getShowMessage(\"You landed on the 'Go to Jail' field and have been sent to prison.\");\n                Player[playerTurn].setPlayerPosition(6);\n                gui_controller.setGui_car(playerTurn, 6, 18);\n                Player[playerTurn].setJail(true);\n            }\n            // Handles gui null-point-error when a field is not yet owned by anyone\n            try {\n                for (int i = 0; i < noPlayer - 1; i++) {\n                    // Finds the index of the owner of the current field\n                    if (gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName().equals(Player[i].getName())) {\n                        indexPlayerOwner = i;\n                    }\n                }\n            }\n            // Handles the exception. Proceeds with the code.\n            catch (NullPointerException e) {\n            }\n\n            //Checks if a field is not owned, and if the field is buyable (e.g. not start and chance-cards)\n            if (gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName() == null && Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) != 0) {\n                buyField();\n            }\n            // Checks if the current player own the field\n            else if (!Objects.equals(Player[playerTurn].getName(), gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName())) {\n                accounting();\n            }\n            // Displays a chance card if landing on chance fields\n            if (Player[playerTurn].getPlayerPosition() == 3 || Player[playerTurn].getPlayerPosition() == 9 || Player[playerTurn].getPlayerPosition() == 15 || Player[playerTurn].getPlayerPosition() == 21) {\n                chanceCards();\n            }\n\n\n            if (Player[playerTurn].getAccountBalance() < 0) {\n                if (noPlayer == 2) {\n\n                }\n            }\n\n            turn();\n        }\n    }\n\n    /**\n     * Increments the playerTurn variable with one.\n     */\n    private void turn() {\n        if (playerTurn < noPlayer - 1){\n            playerTurn += 1;\n        } else {\n            playerTurn = 0;\n        }\n\n    }\n\n    /**\n     * Counts all available fields\n     * @return number of available fields\n     */\n    private int ownableFields(){\n        int count = 0;\n        for (int i = 0; i < 24; i++) {\n            if(gui_controller.getField(i).getOwnerName() == null){\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Gives the field to the current player for free!\n     */\n    private void freeField(){\n        // Sets player as new owner\n        gui_controller.getField(Player[playerTurn].getPlayerPosition()).setOwnerName(Player[playerTurn].getName());\n        //Colours the field the same colour as the car to show who owns the field\n        gui_controller.getField(Player[playerTurn].getPlayerPosition()).setBorder(gui_controller.gui_Player[playerTurn].getPrimaryColor());\n    }\n\n    /**\n     * Handles the rent payment, checks for ownership of neighbouring fields.\n     */\n    private void accounting(){\n        if (Player[playerTurn].getPlayerPosition() != 23 && Objects.equals(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName(), gui_controller.getField(Player[playerTurn].getPlayerPosition() + 1).getOwnerName())){\n            //Sets the owners account balance after collecting double rent\n            Player[playerTurn].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) * 2);\n            Player[indexPlayerOwner].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) * -2);\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[indexPlayerOwner].getAccountBalance());\n        }\n        // Same as prev but backwards\n        else if (Player[playerTurn].getPlayerPosition() != 0 && Objects.equals(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName(), gui_controller.getField(Player[playerTurn].getPlayerPosition() - 1).getOwnerName())){\n            Player[playerTurn].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) * 2);\n            Player[indexPlayerOwner].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) * -2);\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[indexPlayerOwner].getAccountBalance());\n        }\n        // Makes the player pay normal rent\n        else{\n            Player[playerTurn].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()));\n            //The owner collects rent\n            Player[indexPlayerOwner].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) * -1);\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[indexPlayerOwner].getAccountBalance());\n        }\n    }\n\n    /**\n     * Handles the purchase of a field.\n     */\n    private void buyField(){\n        // Sets player as new owner\n        gui_controller.getField(Player[playerTurn].getPlayerPosition()).setOwnerName(Player[playerTurn].getName());\n        //Colours the field the same colour as the car to show who owns the field\n        gui_controller.getField(Player[playerTurn].getPlayerPosition()).setBorder(gui_controller.gui_Player[playerTurn].getPrimaryColor());\n        //Sets the new account balance after buying the property\n        Player[playerTurn].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()));\n        gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n    }\n\n    /**\n     * Moves you to the color of one of the two fields\n     * @param chanceCardField The next chance field, in relation to the color.\n     * @param fieldOne the first field of that particular color.\n     * @param fieldTwo the subsequent field.\n     */\n    private void moveToColor(int chanceCardField, int fieldOne, int fieldTwo){\n        if (Player[playerTurn].getPlayerPosition() >= chanceCardField) {\n            Player[playerTurn].addAccountBalance(2);\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n        }\n        if (gui_controller.getField(fieldOne).getOwnerName() == null) {\n            gui_controller.setGui_car(playerTurn, fieldOne, Player[playerTurn].getPlayerPosition());\n            Player[playerTurn].setPlayerPosition(fieldOne);\n            freeField();\n        } else if (gui_controller.getField(fieldTwo).getOwnerName() == null) {\n            gui_controller.setGui_car(playerTurn, fieldTwo, Player[playerTurn].getPlayerPosition());\n            Player[playerTurn].setPlayerPosition(fieldTwo);\n            freeField();\n        } else {\n            gui_controller.setGui_car(playerTurn, fieldOne, Player[playerTurn].getPlayerPosition());\n            Player[playerTurn].setPlayerPosition(fieldOne);\n            accounting();\n        }\n    }\n\n    /**\n     *Manages the player-specific chance cards\n     */\n    private void manageField(){\n        if (ownableFields() == 0) {\n            int userInput = Integer.parseInt(gui_controller.getUserButtonPressed(\"CHOOSE A FIELD TO BUY\", \"1\", \"2\", \"4\", \"5\", \"7\", \"8\", \"10\", \"11\", \"13\", \"14\", \"16\", \"17\", \"19\", \"20\", \"22\", \"23\"));\n            gui_controller.setGui_car(playerTurn, userInput - 1, Player[playerTurn].getPlayerPosition());\n            Player[playerTurn].setPlayerPosition(userInput - 1);\n            Player[playerTurn].addAccountBalance(Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()));\n            gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n        } else {\n            while (gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName() == null && Integer.parseInt(gui_controller.getField(Player[playerTurn].getPlayerPosition()).getRent()) != 0) {\n                gui_controller.setGui_car(playerTurn, 1 + Player[playerTurn].getPlayerPosition() - 24, Player[playerTurn].getPlayerPosition());\n                Player[playerTurn].addPlayerPosition(1);\n            }\n            buyField();\n        }\n    }\n\n    /**\n     * Handles all chance card cases\n     */\n    private void chanceCards() {\n        deck.draw();\n        while(deck.getLastCard().getCardDescription() == null){\n            deck.draw();\n        }\n        gui_controller.displayChanceCard(deck.getLastCard().getCardDescription());\n        gui_controller.getUserButtonPressed(\" \", \"Continue\");\n        switch (deck.getLastCard().getIndex()) {\n            case 0:\n                if (playerTurn == 2) {\n                        manageField();\n\n                } else {\n                        Player[2].setHasCard(true);\n                }\n                break;\n\n\n            case 1:\n                gui_controller.setGui_car(playerTurn, 0, Player[playerTurn].getPlayerPosition());\n                Player[playerTurn].setPlayerPosition(0);\n                Player[playerTurn].addAccountBalance(2);\n                gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                break;\n            case 2:\n                int userChoice = Integer.parseInt(gui_controller.getUserButtonPressed(\"DU MÅ RYKKE OP TIL 5 FELTER\", \"1\", \"2\", \"3\", \"4\", \"5\"));\n                gui_controller.setGui_car(playerTurn, Player[playerTurn].getPlayerPosition() + userChoice, Player[playerTurn].getPlayerPosition());\n                Player[playerTurn].addPlayerPosition(userChoice);\n                break;\n            case 3:\n                moveToColor(15,10,11);\n                break;\n            case 4:\n                String userChoice1 = gui_controller.getUserButtonPressed(\"DU MÅ RYKKE ET FELT ELLER TRÆKKE ET KORT TIL\", \"1\", \"TRÆK ET KORT TIL\");\n                if(userChoice1.equals(\"TRÆK ET KORT TIL\")) {\n                    chanceCards();\n                    break;\n                }\n                if(userChoice1.equals(\"1\")){\n                    gui_controller.setGui_car(playerTurn, 1 + Player[playerTurn].getPlayerPosition(), Player[playerTurn].getPlayerPosition());\n                    Player[playerTurn].addPlayerPosition(Player[playerTurn].getPlayerPosition() + 1);\n                    break;\n                }\n            case 5:\n                if (playerTurn == 3) {\n                       manageField();\n\n                } else {\n                        Player[3].setHasCard(true);\n                }\n                break;\n            case 6:\n                Player[playerTurn].addAccountBalance(-2);\n                gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                break;\n            case 7:\n                String userChoice2 = gui_controller.getUserButtonPressed(\"ORANGE ELLER GRØN?\", \"ORANGE\", \"GRØN\");\n                if(userChoice2.equals(\"ORANGE\")) {\n                    moveToColor(15, 10, 11);\n                    break;\n                }\n                if(userChoice2.equals(\"GRØN\")){\n                    moveToColor(21,19,20);\n                    break;\n                }\n            case 8:\n                moveToColor(9, 4, 5);\n                break;\n            case 9:\n                Player[playerTurn].setJailCard(true);\n                break;\n            case 10:\n                if (gui_controller.getField(23).getOwnerName() == null) {\n                    gui_controller.setGui_car(playerTurn, 23, Player[playerTurn].getPlayerPosition());\n                    Player[playerTurn].setPlayerPosition(23);\n                    buyField();\n                    break;\n                } else {\n                    gui_controller.setGui_car(playerTurn, 23, Player[playerTurn].getPlayerPosition());\n                    Player[playerTurn].setPlayerPosition(23);\n                    accounting();\n                    break;\n                }\n            case 11:\n                if (deck.getLastCard() == null)\n                    break;\n                else {\n                    if (playerTurn == 0) {\n                        manageField();\n\n                    } else {\n                        Player[0].setHasCard(true);\n                    }\n                    break;\n                }\n            case 12:\n                if (deck.getLastCard() == null)\n                    break;\n                else {\n                    if (playerTurn == 1) {\n                        manageField();\n                    } else {\n                        Player[1].setHasCard(true);\n                    }\n                    break;\n\n                }\n            case 13:\n                Player[playerTurn].addAccountBalance(1);\n                gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                break;\n            case 14:\n                String userChoice3 = gui_controller.getUserButtonPressed(\"PINK ELLER MØRKEBLÅT?\", \"PINK\", \"MØRKEBLÅT\");\n                if(userChoice3.equals(\"PINK\")) {\n                    moveToColor(9, 7, 8);\n                    break;\n                }\n                if(userChoice3.equals(\"MØRKEBLÅT\")){\n                    moveToColor(22, 22, 23);\n                    break;\n                }\n            case 15:\n                Player[playerTurn].addAccountBalance(2);\n                gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                break;\n            case 16:\n                moveToColor(15, 13, 14);\n                break;\n            case 17:\n                if (Player[playerTurn].getPlayerPosition() > 14) {\n                    Player[playerTurn].addAccountBalance(2);\n                    gui_controller.setGUI_AccountBalance(playerTurn, Player[playerTurn].getAccountBalance());\n                }\n                if (gui_controller.getField(10).getOwnerName() == null) {\n                    gui_controller.setGui_car(playerTurn, 10, Player[playerTurn].getPlayerPosition());\n                    Player[playerTurn].setPlayerPosition(10);\n                    freeField();\n                } else {\n                    gui_controller.setGui_car(playerTurn, 10, Player[playerTurn].getPlayerPosition());\n                    Player[playerTurn].setPlayerPosition(10);\n                    accounting();\n                }\n                break;\n            case 18:\n                String userChoice4 = gui_controller.getUserButtonPressed(\"LYSEBLÅT ELLER RØDT?\", \"LYSEBLÅT\", \"RØDT\");\n                if(userChoice4.equals(\"LYSEBLÅT\")) {\n                    moveToColor(9, 4, 5);\n                    break;\n\n                }\n                if(userChoice4.equals(\"RØDT\")){\n                    moveToColor(15, 14,13);\n                    break;\n                }\n            case 19:\n                String userChoice5 = gui_controller.getUserButtonPressed(\"BRUNT ELLER GULT?\", \"BRUNT\", \"GULT\");\n                if(userChoice5.equals(\"BRUNT\")) {\n                    moveToColor(3, 1, 2);\n                    break;\n\n                }\n                if(userChoice5.equals(\"GULT\")){\n                    moveToColor(21, 16,17);\n                    break;\n                }\n\n\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/Game/GameController.java b/src/main/java/org/Game/GameController.java
--- a/src/main/java/org/Game/GameController.java	(revision 49a970b41b7f39a2099074a4f092b8b3b5103391)
+++ b/src/main/java/org/Game/GameController.java	(date 1668699608771)
@@ -219,9 +219,17 @@
             Player[playerTurn].setPlayerPosition(fieldTwo);
             freeField();
         } else {
-            gui_controller.setGui_car(playerTurn, fieldOne, Player[playerTurn].getPlayerPosition());
-            Player[playerTurn].setPlayerPosition(fieldOne);
-            accounting();
+            String userInput = gui_controller.getUserButtonPressed("choose a field", "first", "second");
+            if(userInput.equals("first")){
+                gui_controller.setGui_car(playerTurn, fieldOne, Player[playerTurn].getPlayerPosition());
+                Player[playerTurn].setPlayerPosition(fieldOne);
+            } else {
+                gui_controller.setGui_car(playerTurn, fieldTwo, Player[playerTurn].getPlayerPosition());
+                Player[playerTurn].setPlayerPosition(fieldTwo);
+            }
+            if(!Objects.equals(Player[playerTurn].getName(), gui_controller.getField(Player[playerTurn].getPlayerPosition()).getOwnerName())) {
+                accounting();
+            }
         }
     }
 
